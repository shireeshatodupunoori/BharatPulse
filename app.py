import streamlit as st

# --- CRITICAL: set_page_config MUST BE THE FIRST STREAMLIT COMMAND ---
st.set_page_config(
    page_title="‡∞≠‡∞æ‡∞∞‡∞§‡±ç ‡∞™‡∞≤‡±ç‡∞∏‡±ç (BharatPulse) - ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å",
    page_icon="üì∞",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Remaining Imports (after set_page_config) ---
import feedparser
import requests
from bs4 import BeautifulSoup
from newspaper import Article # Make sure newspaper3k and lxml_html_clean are installed
import torch
from transformers import AutoModelForSeq2SeqLM, AutoTokenizer
import time
import geocoder
import json

# --- Configuration ---
TELUGU_CATEGORIES = {
    "‡∞ú‡∞æ‡∞§‡±Ä‡∞Ø ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å": "National",
    "‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞ ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å": "State",
    "‡∞ï‡±ç‡∞∞‡±à‡∞Ç": "Crime",
    "‡∞∞‡∞æ‡∞ú‡∞ï‡±Ä‡∞Ø‡∞æ‡∞≤‡±Å": "Politics",
    "‡∞µ‡±ç‡∞Ø‡∞æ‡∞™‡∞æ‡∞∞‡∞Ç": "Business",
    "‡∞ï‡±ç‡∞∞‡±Ä‡∞°‡∞≤‡±Å": "Sports",
    "‡∞µ‡∞ø‡∞®‡±ã‡∞¶‡∞Ç": "Entertainment",
    "‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞æ‡∞≤‡±Å": "Jobs",
    "‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç": "Weather",
    "‡∞µ‡±à‡∞∞‡∞≤‡±ç": "Viral",
}

# --- RSS Feed URLs ---
# These are examples. You might need to verify their current validity and content.
# Some news sites do not offer comprehensive RSS feeds, and scraping might be needed.
RSS_FEEDS = {
    "Sakshi": "https://www.sakshi.com/tags/rss", # This appears to be a general RSS for Sakshi.
    "Eenadu": "https://www.eenadu.net/telugu-news/rss", # This URL from search might be old/unofficial.
    # Way2News does not appear to have a public RSS feed, requiring scraping if you want its content.
    # For now, let's stick to sources that publicly offer RSS.
    # You might consider other major Telugu news sources like ABN Andhra Jyothy, TV9 Telugu if they have RSS.
}

# --- OpenWeatherMap API Configuration (for Realtime Weather) ---
# YOU MUST OBTAIN YOUR OWN API KEY FROM OpenWeatherMap.org and replace the placeholder below.
# A free account gives you access to a key.
OPENWEATHERMAP_API_KEY = "YOUR_OPENWEATHERMAP_API_KEY_HERE" # <--- IMPORTANT: REPLACE THIS WITH YOUR REAL KEY!
OPENWEATHERMAP_API_URL = "http://api.openweathermap.org/data/2.5/weather"

# --- Hugging Face Model Loading (Cached for performance) ---
@st.cache_resource
def load_translation_model():
    """Loads the IndicTrans2 English to Telugu translation model."""
    MODEL_NAME = "ai4bharat/indictrans2-en-indic-dist-200M" # A distilled version (200M parameters)

    try:
        # The 'trust_remote_code=True' is essential for this model.
        # Ensure 'sentencepiece' is installed in your environment (pip install sentencepiece).
        tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME, trust_remote_code=True)
        model = AutoModelForSeq2SeqLM.from_pretrained(MODEL_NAME, trust_remote_code=True)

        # Move model to GPU if available
        if torch.cuda.is_available():
            model.to("cuda")
            st.success("‡∞Ö‡∞®‡±Å‡∞µ‡∞æ‡∞¶ ‡∞Æ‡±ã‡∞°‡∞≤‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø (Translation model loaded successfully) (GPU).")
        else:
            st.success("‡∞Ö‡∞®‡±Å‡∞µ‡∞æ‡∞¶ ‡∞Æ‡±ã‡∞°‡∞≤‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø (Translation model loaded successfully) (CPU).")
        return tokenizer, model
    except Exception as e:
        st.error(f"Error loading translation model: {e}")
        st.warning("‡∞Ö‡∞®‡±Å‡∞µ‡∞æ‡∞¶ ‡∞´‡±Ä‡∞ö‡∞∞‡±ç ‡∞®‡∞ø‡∞≤‡∞ø‡∞™‡∞ø‡∞µ‡±á‡∞Ø‡∞¨‡∞°‡±Å‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø 'transformers', 'torch' ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å 'sentencepiece' ‡∞∏‡∞∞‡∞ø‡∞ó‡±ç‡∞ó‡∞æ ‡∞á‡∞®‡±ç‚Äå‡∞∏‡±ç‡∞ü‡∞æ‡∞≤‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞®‡∞ø, ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞§‡∞ó‡∞ø‡∞®‡∞Ç‡∞§ ‡∞µ‡∞®‡∞∞‡±Å‡∞≤‡±Å ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞®‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡±ã‡∞°‡∞≤‡±ç‚Äå‡∞®‡±Å ‡∞°‡±å‡∞®‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞∏‡±ç‡∞•‡∞ø‡∞∞‡∞Æ‡±à‡∞® ‡∞á‡∞Ç‡∞ü‡∞∞‡±ç‡∞®‡±Ü‡∞ü‡±ç ‡∞ï‡∞®‡±Ü‡∞ï‡±ç‡∞∑‡∞®‡±ç ‡∞â‡∞Ç‡∞¶‡∞®‡∞ø ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø. (Translation feature will be disabled. Please ensure 'transformers', 'torch', and 'sentencepiece' are installed correctly, you have sufficient resources, and a stable internet connection to download the model.)")
        st.caption("‡∞Æ‡±Ä‡∞∞‡±Å 'sentencepiece' ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞≤‡±ã‡∞™‡∞Ç ‡∞ö‡±Ç‡∞∏‡∞ø‡∞®‡∞ü‡±ç‡∞≤‡∞Ø‡∞ø‡∞§‡±á, ‡∞Æ‡±Ä ‡∞ü‡±Ü‡∞∞‡±ç‡∞Æ‡∞ø‡∞®‡∞≤‡±ç‚Äå‡∞≤‡±ã `pip install sentencepiece`‡∞®‡∞ø ‡∞Ö‡∞Æ‡∞≤‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. (If you see an error about 'sentencepiece', run `pip install sentencepiece` in your terminal.)")
        st.caption("‡∞Æ‡±Ä‡∞∞‡±Å ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡±Ä‡∞ï‡∞∞‡∞£ ‡∞≤‡±ã‡∞™‡∞æ‡∞≤‡∞®‡±Å ‡∞ö‡±Ç‡∞∏‡∞ø‡∞®‡∞ü‡±ç‡∞≤‡∞Ø‡∞ø‡∞§‡±á, ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞Æ‡±Ä ‡∞ü‡±Ü‡∞∞‡±ç‡∞Æ‡∞ø‡∞®‡∞≤‡±ç‚Äå‡∞≤‡±ã `huggingface-cli login`‡∞®‡∞ø ‡∞Ö‡∞Æ‡∞≤‡±Å ‡∞ö‡±á‡∞Ø‡∞æ‡∞≤‡±ç‡∞∏‡∞ø ‡∞∞‡∞æ‡∞µ‡∞ö‡±ç‡∞ö‡±Å. (If you see authentication errors, you might need to run `huggingface-cli login` in your terminal.)")
        return None, None

tokenizer_en_te, model_en_te = load_translation_model()

def translate_en_to_te(text):
    if tokenizer_en_te is None or model_en_te is None:
        return "Translation service unavailable."
    if not text or not text.strip(): # Handle empty or whitespace-only input
        return ""
    try:
        # IndicTrans2 models typically expect language tags in the input for multi-lingual models.
        # <2en> for 'to English', <2te> for 'to Telugu'
        # For EN->TE, the input format for the 'dist' models is `<2te> English_Sentence`
        input_text_with_tags = f"<2te> {text}" 
        
        inputs = tokenizer(input_text_with_tags, return_tensors="pt", padding=True, truncation=True)
        
        if torch.cuda.is_available():
            inputs = {k: v.to("cuda") for k, v in inputs.items()}
        
        translated_tokens = model_en_te.generate(**inputs, max_new_tokens=128, num_beams=5, early_stopping=True)
        translated_text = tokenizer_en_te.batch_decode(translated_tokens, skip_special_tokens=True)[0]
        # Remove any lingering target language tags if present in output
        return translated_text.replace("<2te>", "").strip()
    except Exception as e:
        st.error(f"Error during translation: {e}")
        return "Translation failed."

# --- RSS Feed Fetching and Parsing (Cached for performance) ---
@st.cache_data(ttl=3600) # Cache for 1 hour to reduce API calls to news sites
def get_news_from_rss(url):
    try:
        feed = feedparser.parse(url)
        articles = []
        for entry in feed.entries:
            title = entry.title if hasattr(entry, 'title') else ""
            link = entry.link if hasattr(entry, 'link') else "#"
            summary = entry.summary if hasattr(entry, 'summary') and entry.summary.strip() else ""
            published = entry.published if hasattr(entry, 'published') else "N/A"
            image_url = None

            # Attempt to find image from media_content (common in some RSS feeds)
            if hasattr(entry, 'media_content') and entry.media_content:
                for media in entry.media_content:
                    # Check for actual image type
                    if 'url' in media and media.get('type', '').startswith('image'):
                        image_url = media['url']
                        break
            # Attempt to find image from description HTML (common in others)
            elif hasattr(entry, 'description'):
                soup = BeautifulSoup(entry.description, 'html.parser')
                img_tag = soup.find('img')
                if img_tag and 'src' in img_tag.attrs:
                    image_url = img_tag['src']

            # Fallback to newspaper3k for better image/summary extraction from the article link
            # Only if link is valid and no image/summary found yet
            if link and "http" in link and link != "#" and (not image_url or not summary):
                try:
                    article_parser = Article(link)
                    article_parser.download()
                    article_parser.parse()
                    if not image_url and article_parser.top_image:
                        image_url = article_parser.top_image
                    if not summary and article_parser.text: # Use first part of article text if no summary from RSS
                        summary = article_parser.text[:200] + "..." if len(article_parser.text) > 200 else article_parser.text

                except Exception as e:
                    # print(f"Newspaper3k failed for {link}: {e}") # Uncomment for debugging newspaper issues
                    pass # Silently fail if newspaper3k can't extract

            # Only add articles with a valid title and link
            if title.strip() and link.strip() != "#":
                articles.append({
                    "title": title,
                    "link": link,
                    "summary": summary,
                    "published": published,
                    "image_url": image_url,
                    "translated_title": None # Placeholder for translation
                })
        return articles
    except Exception as e:
        st.error(f"Error fetching news from {url}: {e}")
        return []

# --- Voice Search (Placeholder - requires a separate library/API) ---
def voice_search_widget():
    st.write("### üéôÔ∏è ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞∏‡±Ü‡∞∞‡±ç‡∞ö‡±ç (Voice Search)")
    st.warning("Voice search integration with Whisper requires external setup (e.g., a local Whisper model, an API, or a custom Streamlit component). This is a placeholder.")
    # Example placeholder for voice input (requires user interaction)
    audio_file = st.file_uploader("Upload an audio file (e.g., .wav, .mp3) for transcription:", type=["wav", "mp3"])
    if audio_file:
        st.audio(audio_file, format="audio/wav")
        st.info("Transcribing audio... (This is a mock transcription)")
        # In a real app, you'd send `audio_file` to a Whisper model/API
        st.write("‡∞ü‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞∏‡±ç‡∞ï‡±ç‡∞∞‡∞ø‡∞™‡±ç‡∞∑‡∞®‡±ç: ‡∞á‡∞¶‡∞ø ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞∏‡±ç ‡∞∏‡±Ü‡∞∞‡±ç‡∞ö‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞í‡∞ï ‡∞®‡∞ï‡∞ø‡∞≤‡±Ä ‡∞ü‡±ç‡∞∞‡∞æ‡∞®‡±ç‡∞∏‡±ç‡∞ï‡±ç‡∞∞‡∞ø‡∞™‡±ç‡∞∑‡∞®‡±ç (Transcription: This is a mock transcription for voice search)")
        # You would then use the transcribed text for actual search

# --- Location Detection (Placeholder) ---
@st.cache_data(ttl=3600) # Cache location for an hour
def get_user_location():
    """Attempts to get user's public IP based location (city/district)."""
    try:
        g = geocoder.ip('me')
        if g.ok:
            city = g.city if g.city else "Hyderabad"
            state = g.state if g.state else "Telangana"
            country = g.country if g.country else "India"
            return city, state, country
        else:
            return "Hyderabad", "Telangana", "India" # Default to Hyderabad if geocoder fails
    except Exception as e:
        st.warning(f"Could not detect location: {e}. Defaulting to Hyderabad.")
        return "Hyderabad", "Telangana", "India"

# --- Weather Integration ---
@st.cache_data(ttl=600) # Cache weather for 10 minutes
def get_current_weather(city_name, api_key):
    # Check if API key is configured
    if not api_key or api_key == "YOUR_OPENWEATHERMAP_API_KEY_HERE":
        # Do not raise an error here, let the calling function display the warning.
        return None

    params = {
        'q': city_name,
        'appid': api_key,
        'units': 'metric', # For Celsius
        'lang': 'te' # Try for Telugu, though not all weather APIs support all languages
    }
    try:
        response = requests.get(OPENWEATHERMAP_API_URL, params=params)
        response.raise_for_status() # Raise an exception for HTTP errors (4xx or 5xx)
        weather_data = response.json()

        # Extract relevant info
        main_weather = weather_data['weather'][0]['description'] if weather_data.get('weather') else "N/A"
        temperature = weather_data['main']['temp']
        feels_like = weather_data['main']['feels_like']
        humidity = weather_data['main']['humidity']
        wind_speed = weather_data['wind']['speed']

        weather_info = {
            "description": main_weather.capitalize(),
            "temperature": temperature,
            "feels_like": feels_like,
            "humidity": humidity,
            "wind_speed": wind_speed
        }
        return weather_info
    except requests.exceptions.RequestException as e:
        st.error(f"Error fetching weather for {city_name}: {e}. This might be due to an invalid city name or API key issues.")
        return None
    except json.JSONDecodeError:
        st.error(f"Error decoding weather data for {city_name}. Invalid response from API.")
        return None
    except KeyError as e:
        st.error(f"Missing key in weather data for {city_name}: {e}. API response might be incomplete or unexpected.")
        return None

# --- Custom CSS for card-like appearance, horizontal scrolling (no background color) ---
st.markdown("""
<style>
/* Streamlit Tabs Styling */
.stTabs [data-baseweb="tab-list"] button {
    padding: 10px 15px;
    font-size: 16px;
}
.stTabs [data-baseweb="tab-list"] {
    gap: 15px; /* Spacing between tabs */
    flex-wrap: nowrap; /* Prevent wrapping */
    overflow-x: auto; /* Enable horizontal scrolling */
    -webkit-overflow-scrolling: touch; /* For smoother scrolling on iOS */
    scrollbar-width: thin; /* Firefox */
    scrollbar-color: #ccc #f1f1f1; /* Firefox */
}
.stTabs [data-baseweb="tab-list"]::-webkit-scrollbar {
    height: 6px; /* Height of the scrollbar */
}
.stTabs [data-baseweb="tab-list"]::-webkit-scrollbar-thumb {
    background-color: #ccc; /* Color of the scrollbar thumb */
    border-radius: 3px; /* Rounded corners for the thumb */
}
.stTabs [data-baseweb="tab-list"]::-webkit-scrollbar-track {
    background-color: #f1f1f1; /* Color of the scrollbar track */
}

/* News Card Styling */
.news-card {
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 15px;
    margin-bottom: 20px;
    box-shadow: 2px 2px 8px rgba(0,0,0,0.1);
    display: flex;
    flex-direction: column;
    height: 100%; /* Ensures cards in a row have equal height */
    background-color: #ffffff; /* Explicit white background for cards */
}
.news-card img {
    max-width: 100%;
    height: 200px; /* Fixed height for images */
    object-fit: cover; /* Ensures image covers the area, might crop */
    border-radius: 4px;
    margin-bottom: 10px;
}
.news-card h3 {
    font-size: 1.2em;
    margin-bottom: 5px;
    min-height: 2.4em; /* Ensure consistent height for titles (approx 2 lines) */
    display: -webkit-box;
    -webkit-line-clamp: 2; /* Limit title to 2 lines */
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}
.news-card p {
    font-size: 0.9em;
    color: #555;
    flex-grow: 1; /* Allows summary to take up available space */
    min-height: 4.5em; /* Ensure consistent height for summaries (approx 3 lines) */
    display: -webkit-box;
    -webkit-line-clamp: 3; /* Limit summary to 3 lines */
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}
.news-card a {
    text-decoration: none;
    color: #007bff;
    font-weight: bold;
    margin-top: auto; /* Pushes link to bottom */
}
.news-card a:hover {
    text-decoration: underline;
}

/* For horizontal scrolling category buttons (using st.radio) */
.stRadio > label {
    margin-right: 15px;
    padding: 8px 12px;
    border: 1px solid #007bff;
    border-radius: 20px;
    cursor: pointer;
    background-color: #f0f8ff;
    white-space: nowrap; /* Prevent buttons from wrapping */
}
.stRadio > label:hover {
    background-color: #e0f0ff;
}
/* Style for the selected radio button */
.stRadio [aria-checked="true"] > div:first-child { /* Targets the inner div that gets styled */
    background-color: #007bff !important; /* Force background color */
    color: white !important; /* Force text color */
    border-color: #007bff !important; /* Force border color */
}

/* Make the radio button container scrollable */
div[data-testid="stRadio"] > div {
    flex-wrap: nowrap; /* Prevent wrapping of radio buttons */
    overflow-x: auto; /* Enable horizontal scrolling */
    -webkit-overflow-scrolling: touch; /* For smoother scrolling on iOS */
    scrollbar-width: thin;
    scrollbar-color: #ccc #f1f1f1;
}
div[data-testid="stRadio"] > div::-webkit-scrollbar {
    height: 6px;
}
div[data-testid="stRadio"] > div::-webkit-scrollbar-thumb {
    background-color: #ccc;
    border-radius: 3px;
}
div[data-testid="stRadio"] > div::-webkit-scrollbar-track {
    background-color: #f1f1f1;
}

</style>
""", unsafe_allow_html=True)


st.title("‡∞≠‡∞æ‡∞∞‡∞§‡±ç ‡∞™‡∞≤‡±ç‡∞∏‡±ç (BharatPulse) üáÆüá≥")
st.markdown("‡∞Æ‡±Ä ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ú‡∞æ‡∞§‡±Ä‡∞Ø ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤ ‡∞µ‡∞®‡±ç-‡∞∏‡±ç‡∞ü‡∞æ‡∞™‡±ç ‡∞Æ‡±Ç‡∞≤‡∞Ç (Your one-stop source for local and national news)")

# Add "User Profile" to the main tabs
main_tabs = st.tabs(["üì∞ Headlines", "üìç My Location", "üîç Search City", "üéôÔ∏è Voice Search", "üë§ User Profile"])

# Initialize session state variables for user profile details
if 'user_name' not in st.session_state:
    st.session_state.user_name = ""
if 'user_email' not in st.session_state:
    st.session_state.user_email = ""
if 'user_location' not in st.session_state:
    st.session_state.user_location = ""
if 'account_creation_date' not in st.session_state:
    st.session_state.account_creation_date = "N/A" # Could set to current date on first run

# --- Tab 1: Headlines ---
with main_tabs[0]:
    st.header("‡∞™‡±ç‡∞∞‡∞ß‡∞æ‡∞® ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å (Headlines)")

    # Category selection for filtering
    st.markdown("##### ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤ ‡∞µ‡∞ø‡∞≠‡∞æ‡∞ó‡∞æ‡∞≤‡±Å (News Categories)")
    # Using st.radio with horizontal option for category selection
    selected_category_tl = st.radio(
        "‡∞µ‡∞ø‡∞≠‡∞æ‡∞ó‡∞Ç ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø (Select Category):",
        options=list(TELUGU_CATEGORIES.keys()),
        index=0,
        horizontal=True, # Makes radio buttons horizontal and scrollable
        key="headlines_category_select"
    )
    # The actual category filtering logic would go here based on `selected_category_tl`
    # For now, it's a placeholder.
    st.markdown(f"**‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞® ‡∞µ‡∞ø‡∞≠‡∞æ‡∞ó‡∞Ç:** {selected_category_tl}")

    st.markdown("---")

    all_articles = []
    with st.spinner("‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡∞®‡±Å ‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±ã‡∞Ç‡∞¶‡∞ø... (Loading news...)"):
        for source_name, rss_url in RSS_FEEDS.items():
            st.markdown(f"**{source_name} ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å**")
            articles = get_news_from_rss(rss_url)
            
            for article in articles:
                # Simple heuristic to determine if translation is needed: check for ASCII alpha chars
                # This prevents trying to translate already Telugu titles or titles with mixed scripts
                if any(char.isalpha() and char.isascii() for char in article['title']):
                    article['translated_title'] = translate_en_to_te(article['title'])
                else:
                    article['translated_title'] = article['title'] # Assume it's already Telugu or mixed

            all_articles.extend(articles)
        
        if not all_articles:
            st.warning("‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞≤‡±á‡∞¶‡±Å. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä RSS ‡∞´‡±Ä‡∞°‡±ç URL‡∞≤‡∞®‡±Å ‡∞§‡∞®‡∞ø‡∞ñ‡∞ø ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞á‡∞Ç‡∞ü‡∞∞‡±ç‡∞®‡±Ü‡∞ü‡±ç ‡∞ï‡∞®‡±Ü‡∞ï‡±ç‡∞∑‡∞®‡±ç\u200c‡∞®‡∞ø ‡∞§‡∞®‡∞ø‡∞ñ‡∞ø ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. (No news loaded. Please check your RSS feed URLs or internet connection.)")

    # Display news in a grid (swipe-style mock-up)
    if all_articles:
        num_cols = 3 # Number of columns for news cards
        rows = []
        for i in range(0, len(all_articles), num_cols):
            rows.append(all_articles[i:i + num_cols])

        for row_articles in rows:
            cols = st.columns(num_cols)
            for i, article in enumerate(row_articles):
                with cols[i]:
                    with st.container(): # Using container for card effect
                        st.markdown(f'<div class="news-card">', unsafe_allow_html=True)
                        if article['image_url']:
                            st.image(article['image_url'], use_column_width="always", caption="")
                        
                        # Display translated title first, with expander for original if translated
                        if article['translated_title'] and article['translated_title'] != article['title'] and article['translated_title'] != "Translation failed.":
                            st.markdown(f"### {article['translated_title']}")
                            with st.expander("Original Title"):
                                st.write(article['title'])
                        else:
                            st.markdown(f"### {article['title']}") # Display original if no translation or translation failed
                        
                        st.markdown(f"<p>{article['summary']}</p>", unsafe_allow_html=True) # Summary is already truncated in get_news_from_rss
                        st.markdown(f"[‡∞™‡±Ç‡∞∞‡±ç‡∞§‡∞ø‡∞ó‡∞æ ‡∞ö‡∞¶‡∞µ‡∞Ç‡∞°‡∞ø (Read More)]({article['link']})", unsafe_allow_html=True)
                        st.markdown('</div>', unsafe_allow_html=True)


# --- Tab 2: My Location ---
with main_tabs[1]:
    st.header("üìç ‡∞®‡∞æ ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç (My Location)")

    user_city, user_state, user_country = get_user_location()
    st.write(f"‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç: **{user_city}, {user_state}, {user_country}**")

    st.subheader("‡∞®‡∞ø‡∞ú-‡∞∏‡∞Æ‡∞Ø ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç + ‡∞π‡±Ü‡∞ö‡±ç‡∞ö‡∞∞‡∞ø‡∞ï‡∞≤‡±Å (Real-time Weather + Alerts)")
    if OPENWEATHERMAP_API_KEY == "YOUR_OPENWEATHERMAP_API_KEY_HERE":
        st.error("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø OpenWeatherMap API ‡∞ï‡±Ä‡∞®‡∞ø ‡∞ï‡∞æ‡∞®‡±ç‡∞´‡∞ø‡∞ó‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞¶‡±Å. (Please configure your OpenWeatherMap API key. Weather data is not available.)")
    else:
        weather_data = get_current_weather(user_city, OPENWEATHERMAP_API_KEY)
        if weather_data:
            st.metric(label="‡∞â‡∞∑‡±ç‡∞£‡±ã‡∞ó‡±ç‡∞∞‡∞§ (Temperature)", value=f"{weather_data['temperature']:.1f}¬∞C", delta=f"Feels like {weather_data['feels_like']:.1f}¬∞C")
            st.write(f"**‡∞™‡∞∞‡∞ø‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø (Condition):** {weather_data['description']}")
            st.write(f"**‡∞§‡±á‡∞Æ (Humidity):** {weather_data['humidity']}%")
            st.write(f"**‡∞ó‡∞æ‡∞≤‡∞ø ‡∞µ‡±á‡∞ó‡∞Ç (Wind Speed):** {weather_data['wind_speed']:.1f} m/s")
            st.info(f"'{user_city}' ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞™‡±ç‡∞∞‡∞∏‡±ç‡∞§‡±Å‡∞§ ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç. (Current weather for '{user_city}').")
        else:
            st.info(f"'{user_city}' ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞°‡±á‡∞ü‡∞æ ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞¶‡±Å. (Weather data not available for '{user_city}').")

    st.subheader("‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å (Local News)")
    # Placeholder for local news (e.g., fetch from specific local RSS or scrape, needs specific city-level data)
    st.info(f"'{user_city}' ‡∞ï‡±Å ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞™‡±ç‡∞∞‡∞¶‡∞∞‡±ç‡∞∂‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞§‡∞æ‡∞Ø‡∞ø. (Local news for '{user_city}' will be displayed here.)")
    
    # Placeholder for alerts (e.g., integrate with disaster management APIs or specific news sources)
    st.subheader("‡∞Ö‡∞≤‡∞∞‡±ç‡∞ü‡±ç‡∞∏‡±ç (Alerts)")
    st.info("‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞π‡±Ü‡∞ö‡±ç‡∞ö‡∞∞‡∞ø‡∞ï‡∞≤‡±Å ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞™‡±ç‡∞∞‡∞¶‡∞∞‡±ç‡∞∂‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞§‡∞æ‡∞Ø‡∞ø. (Local alerts will be displayed here.)")


# --- Tab 3: Search City ---
with main_tabs[2]:
    st.header("üîç ‡∞®‡∞ó‡∞∞‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞∂‡±ã‡∞ß‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø (Search City)")

    search_city = st.text_input("‡∞®‡∞ó‡∞∞‡∞Ç ‡∞≤‡±á‡∞¶‡∞æ ‡∞ú‡∞ø‡∞≤‡±ç‡∞≤‡∞æ ‡∞™‡±á‡∞∞‡±Å‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø (Enter City or District Name):", "‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç", key="city_search_input")
    
    if st.button("‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞∂‡±ã‡∞ß‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø (Search News)", key="search_city_button"):
        st.write(f"**'{search_city}'** ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞≤‡±ã‡∞°‡±ç ‡∞Ö‡∞µ‡±Å‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø... (Loading news for '{search_city}')...")
        
        # Display weather for the searched city
        st.subheader(f"‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç: {search_city} (Weather: {search_city})")
        if OPENWEATHERMAP_API_KEY == "YOUR_OPENWEATHERMAP_API_KEY_HERE":
            st.error("‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø OpenWeatherMap API ‡∞ï‡±Ä‡∞®‡∞ø ‡∞ï‡∞æ‡∞®‡±ç‡∞´‡∞ø‡∞ó‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞¶‡±Å. (Please configure your OpenWeatherMap API key. Weather data is not available.)")
        else:
            weather_data_search = get_current_weather(search_city, OPENWEATHERMAP_API_KEY)
            if weather_data_search:
                st.metric(label="‡∞â‡∞∑‡±ç‡∞£‡±ã‡∞ó‡±ç‡∞∞‡∞§ (Temperature)", value=f"{weather_data_search['temperature']:.1f}¬∞C", delta=f"Feels like {weather_data_search['feels_like']:.1f}¬∞C")
                st.write(f"**‡∞™‡∞∞‡∞ø‡∞∏‡±ç‡∞•‡∞ø‡∞§‡∞ø (Condition):** {weather_data_search['description']}")
                st.write(f"**‡∞§‡±á‡∞Æ (Humidity):** {weather_data_search['humidity']}%")
                st.write(f"**‡∞ó‡∞æ‡∞≤‡∞ø ‡∞µ‡±á‡∞ó‡∞Ç (Wind Speed):** {weather_data_search['wind_speed']:.1f} m/s")
            else:
                st.info(f"'{search_city}' ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞°‡±á‡∞ü‡∞æ ‡∞Ö‡∞Ç‡∞¶‡±Å‡∞¨‡∞æ‡∞ü‡±Å‡∞≤‡±ã ‡∞≤‡±á‡∞¶‡±Å. (Weather data not available for '{search_city}').")

        st.subheader(f"‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å: {search_city} (Local News: {search_city})")
        st.warning("‡∞à ‡∞´‡±Ä‡∞ö‡∞∞‡±ç ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞ø‡∞ï ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞æ ‡∞µ‡∞®‡∞∞‡±Å‡∞≤‡∞®‡±Å ‡∞Ö‡∞®‡±Å‡∞∏‡∞Ç‡∞ß‡∞æ‡∞®‡∞ø‡∞Ç‡∞ö‡∞°‡∞Ç ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç. (This feature requires integration with local news sources.)")
        st.info(f"'{search_city}' ‡∞ï‡±Å ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞™‡±ç‡∞∞‡∞¶‡∞∞‡±ç‡∞∂‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞§‡∞æ‡∞Ø‡∞ø. (News for '{search_city}' will be displayed here.)")


# --- Tab 4: Voice Search ---
with main_tabs[3]:
    voice_search_widget()

# --- Tab 5: User Profile (New Tab) ---
with main_tabs[4]:
    st.header("üë§ ‡∞Ø‡±Ç‡∞ú‡∞∞‡±ç ‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç (User Profile)")
    st.markdown("‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡±ä‡∞´‡±à‡∞≤‡±ç ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ø‡∞æ‡∞™‡±ç ‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó ‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞£‡∞≤‡±Å (Your profile details and app usage analytics)")

    # User Input for Personal Details
    st.subheader("‡∞µ‡±ç‡∞Ø‡∞ï‡±ç‡∞§‡∞ø‡∞ó‡∞§ ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å (Personal Details)")
    
    # Use st.text_input with session state
    st.session_state.user_name = st.text_input(
        "‡∞™‡±á‡∞∞‡±Å (Name):", 
        value=st.session_state.user_name, 
        placeholder="‡∞Æ‡±Ä ‡∞™‡±á‡∞∞‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø (Enter your name)",
        key="profile_name"
    )
    st.session_state.user_email = st.text_input(
        "‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç (Email):", 
        value=st.session_state.user_email, 
        placeholder="‡∞Æ‡±Ä ‡∞á‡∞Æ‡±Ü‡∞Ø‡∞ø‡∞≤‡±ç ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø (Enter your email)",
        key="profile_email"
    )
    st.session_state.user_location = st.text_input(
        "‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç (Location):", 
        value=st.session_state.user_location, 
        placeholder="‡∞Æ‡±Ä ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø (Enter your location)",
        key="profile_location"
    )

    # You could also add a date picker for account creation or auto-set it on first entry
    if st.session_state.account_creation_date == "N/A" and st.session_state.user_name:
        import datetime
        st.session_state.account_creation_date = datetime.date.today().strftime("%B %d, %Y")

    st.write(f"**‡∞ñ‡∞æ‡∞§‡∞æ ‡∞∏‡±É‡∞∑‡±ç‡∞ü‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞§‡±á‡∞¶‡±Ä (Account Created On):** {st.session_state.account_creation_date}")

    st.markdown("---")

    # Mock User Activity/Preferences
    st.subheader("‡∞Ø‡∞æ‡∞™‡±ç ‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞Ç (App Usage)")
    
    st.markdown("###### ‡∞Æ‡±Ä ‡∞µ‡±Ä‡∞ï‡±ç‡∞∑‡∞£‡∞≤‡±Å (Your Views):")
    st.info("‡∞à ‡∞µ‡∞ø‡∞≠‡∞æ‡∞ó‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞µ‡∞æ‡∞∏‡±ç‡∞§‡∞µ ‡∞µ‡∞ø‡∞®‡∞ø‡∞Ø‡±ã‡∞ó‡∞¶‡∞æ‡∞∞‡±Å ‡∞°‡±á‡∞ü‡∞æ ‡∞®‡∞ø‡∞≤‡±ç‡∞µ ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç. ‡∞á‡∞µ‡∞ø ‡∞â‡∞¶‡∞æ‡∞π‡∞∞‡∞£ ‡∞™‡∞æ‡∞Ø‡∞ø‡∞Ç‡∞ü‡±ç‡∞≤‡±Å. (This section requires actual user data storage. These are example points.)")
    
    st.markdown("""
    <ul>
        <li><b>‡∞ö‡±Ç‡∞∏‡∞ø‡∞® ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤ ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø (Articles Viewed):</b> 150+</li>
        <li><b>‡∞Ö‡∞§‡±ç‡∞Ø‡∞Ç‡∞§ ‡∞é‡∞ï‡±ç‡∞ï‡±Å‡∞µ‡∞ó‡∞æ ‡∞ö‡±Ç‡∞∏‡∞ø‡∞® ‡∞µ‡∞∞‡±ç‡∞ó‡∞Ç (Most Viewed Category):</b> ‡∞∞‡∞æ‡∞ú‡∞ï‡±Ä‡∞Ø‡∞æ‡∞≤‡±Å (Politics)</li>
        <li><b>‡∞Ö‡∞§‡±ç‡∞Ø‡∞Ç‡∞§ ‡∞é‡∞ï‡±ç‡∞ï‡±Å‡∞µ‡∞ó‡∞æ ‡∞ö‡±Ç‡∞∏‡∞ø‡∞® ‡∞Æ‡±Ç‡∞≤‡∞Ç (Most Viewed Source):</b> ‡∞∏‡∞æ‡∞ï‡±ç‡∞∑‡∞ø (Sakshi)</li>
        <li><b>‡∞ö‡∞ø‡∞µ‡∞∞‡∞ø‡∞ó‡∞æ ‡∞ö‡±Ç‡∞∏‡∞ø‡∞® ‡∞µ‡∞æ‡∞∞‡±ç‡∞§ (Last Viewed Article):</b> "‡∞π‡±à‡∞¶‡∞∞‡∞æ‡∞¨‡∞æ‡∞¶‡±ç‚Äå‡∞≤‡±ã ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞µ‡∞Ç‡∞§‡±Ü‡∞® ‡∞®‡∞ø‡∞∞‡±ç‡∞Æ‡∞æ‡∞£‡∞Ç" (New Bridge Construction in Hyderabad)</li>
        <li><b>‡∞Ö‡∞®‡±Å‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡∞®‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø (Translations Used):</b> 50 ‡∞∏‡∞æ‡∞∞‡±ç‡∞≤‡±Å (50 times)</li>
    </ul>
    """, unsafe_allow_html=True)

    st.markdown("---")

    st.subheader("‡∞™‡±ç‡∞∞‡∞æ‡∞ß‡∞æ‡∞®‡±ç‡∞Ø‡∞§‡∞≤‡±Å (Preferences)")
    st.write("‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤ ‡∞µ‡∞∞‡±ç‡∞ó‡∞Ç ‡∞™‡±ç‡∞∞‡∞æ‡∞ß‡∞æ‡∞®‡±ç‡∞Ø‡∞§‡∞≤‡±Å (Preferred News Categories):")
    preferred_categories = st.multiselect(
        "‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞æ‡∞ß‡∞æ‡∞®‡±ç‡∞Ø‡∞§ ‡∞ó‡∞≤ ‡∞µ‡∞∞‡±ç‡∞ó‡∞æ‡∞≤‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø (Select your preferred categories):",
        options=list(TELUGU_CATEGORIES.keys()),
        default=["‡∞ú‡∞æ‡∞§‡±Ä‡∞Ø ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å", "‡∞∞‡∞æ‡∞∑‡±ç‡∞ü‡±ç‡∞∞ ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å", "‡∞µ‡±ç‡∞Ø‡∞æ‡∞™‡∞æ‡∞∞‡∞Ç"]
    )
    st.write(f"‡∞Æ‡±Ä‡∞∞‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞µ‡∞ø: {', '.join(preferred_categories)}")

    st.write("‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞æ ‡∞Æ‡±Ç‡∞≤‡∞æ‡∞≤ ‡∞™‡±ç‡∞∞‡∞æ‡∞ß‡∞æ‡∞®‡±ç‡∞Ø‡∞§‡∞≤‡±Å (Preferred News Sources):")
    preferred_sources = st.multiselect(
        "‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞æ‡∞ß‡∞æ‡∞®‡±ç‡∞Ø‡∞§ ‡∞ó‡∞≤ ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞æ ‡∞Æ‡±Ç‡∞≤‡∞æ‡∞≤‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø (Select your preferred news sources):",
        options=list(RSS_FEEDS.keys()),
        default=["Sakshi"]
    )
    st.write(f"‡∞Æ‡±Ä‡∞∞‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞µ‡∞ø: {', '.join(preferred_sources)}")

    st.info("‡∞à ‡∞™‡±ç‡∞∞‡∞æ‡∞ß‡∞æ‡∞®‡±ç‡∞Ø‡∞§‡∞≤‡±Å ‡∞≠‡∞µ‡∞ø‡∞∑‡±ç‡∞Ø‡∞§‡±ç‡∞§‡±Å‡∞≤‡±ã ‡∞Æ‡±Ä ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤ ‡∞´‡±Ä‡∞°‡±ç‚Äå‡∞®‡±Å ‡∞µ‡±ç‡∞Ø‡∞ï‡±ç‡∞§‡∞ø‡∞ó‡∞§‡±Ä‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞§‡∞æ‡∞Ø‡∞ø. (These preferences will be used to personalize your news feed in the future.)")

st.sidebar.title("‡∞≠‡∞æ‡∞∞‡∞§‡±ç ‡∞™‡∞≤‡±ç‡∞∏‡±ç - ‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‚Äå‡∞≤‡±Å")
st.sidebar.info("‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞Ø‡∞æ‡∞™‡±ç ‡∞∏‡±Ü‡∞ü‡±ç‡∞ü‡∞ø‡∞Ç‡∞ó‡±ç‚Äå‡∞≤‡∞®‡±Å ‡∞ï‡∞æ‡∞®‡±ç‡∞´‡∞ø‡∞ó‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞µ‡∞ö‡±ç‡∞ö‡±Å. (Here you can configure app settings.)")

if st.sidebar.button("‡∞∞‡±Ä‡∞´‡±ç‡∞∞‡±Ü‡∞∑‡±ç ‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å", key="refresh_news_button"):
    st.cache_data.clear() # Clear all data caches (news, location, weather)
    st.cache_resource.clear() # Clear model cache (translation model)
    st.rerun() # Rerun the app to load fresh data
    st.sidebar.success("‡∞µ‡∞æ‡∞∞‡±ç‡∞§‡∞≤‡±Å ‡∞∞‡±Ä‡∞´‡±ç‡∞∞‡±Ü‡∞∑‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡±ç‡∞°‡∞æ‡∞Ø‡∞ø!")

st.sidebar.markdown("---")
st.sidebar.markdown("¬© 2025 ‡∞≠‡∞æ‡∞∞‡∞§‡±ç ‡∞™‡∞≤‡±ç‡∞∏‡±ç")
